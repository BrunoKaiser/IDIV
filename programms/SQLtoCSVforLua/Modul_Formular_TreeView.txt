Option Compare Database


Private Sub Befehl18_Click() 'Copy in Tree Form Tree
    Forms!Tree.Tree = Me.Text11
End Sub

Private Sub Befehl21_Click() 'Copy in Tree Form Tree_result
    Forms!Tree.Tree_result = Me.Text11
End Sub

Private Sub Befehl19_Click() 'Copy node
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
Debug.Print objTree.SelectedItem.Text
Debug.Print Me.Text7
Me.Text7 = objTree.SelectedItem.Text
End Sub


Private Sub Befehl24_Click() 'Calculate subtotals

    Dim objTree As TreeView
    Set objTree = Me.TreeView2.Object
    
    Dim ctr As Integer
    Dim childrenctr As Integer
    Dim dataNumber As Double
    Dim dataSum As Double
    Dim dataText As String
    
For ctr = 0 To objTree.Nodes.Count - 1
    '    Debug.Print objTree.Nodes.Item(objTree.Nodes.Count - ctr)
    'Debug.Print objTree.Nodes.Item(objTree.Nodes.Count - ctr).Children
    dataText = ""
    If Not objTree.Nodes.Item(objTree.Nodes.Count - ctr).Children = 0 Then
    dataSum = 0
    dataMax = -999999999999.9
    dataMin = 999999999999.9
    
    
    Set noddy = objTree.Nodes.Item(objTree.Nodes.Count - ctr).Child
    'Debug.Print objTree.Nodes.Item(objTree.Nodes.Count - ctr) & "->" & noddy
    If InStr(1, noddy, ": ", vbTextCompare) = 0 Then
        dataNumber = 0
    Else
        dataNumber = Mid(noddy, InStr(1, noddy, ": ", vbTextCompare) + 2)
    End If 'If InStr(1, noddy, ": ", vbTextCompare) = 0 Then
    'Debug.Print dataNumber
    dataSum = dataSum + dataNumber
    If dataNumber > dataMax Then
        dataMax = dataNumber
    End If 'If dataNumber > dataMax Then
    If dataNumber < dataMin Then
        dataMin = dataNumber
    End If 'If dataNumber > dataMin Then
    For childrenctr = 2 To objTree.Nodes.Item(objTree.Nodes.Count - ctr).Children
        Set noddy = noddy.Next
        'Debug.Print objTree.Nodes.Item(objTree.Nodes.Count - ctr) & "->" & noddy
        If InStr(1, noddy, ": ", vbTextCompare) = 0 Then
            dataNumber = 0
        Else
            dataNumber = Mid(noddy, InStr(1, noddy, ": ", vbTextCompare) + 2)
        End If 'If InStr(1, noddy, ": ", vbTextCompare) = 0 Then
        'Debug.Print dataNumber
        dataSum = dataSum + dataNumber
        If dataNumber > dataMax Then
            dataMax = dataNumber
        End If 'If dataNumber > dataMax Then
        If dataNumber < dataMin Then
            dataMin = dataNumber
        End If 'If dataNumber > dataMin Then
    Next
    'bei gekappten Limitauslastungen, d.h. wenn das Limit nicht ausgelastet ist, wird die Auslastung auf 0 gekappt.
    'If dataSum < 0 Then
    '    dataSum = 0
    'End If 'If dataSum < 0 Then
    dataText = " # " & objTree.Nodes.Item(objTree.Nodes.Count - ctr).Children & " Min  " & dataMin & " Max  " & dataMax & " Durch " & Round(dataSum / objTree.Nodes.Item(objTree.Nodes.Count - ctr).Children, 2) & " S: " & dataSum
    End If 'If Not objTree.Nodes.Item(objTree.Nodes.Count - ctr).Children = 0 Then
    If InStr(1, objTree.Nodes.Item(objTree.Nodes.Count - ctr).Text, ": ") = 0 Then
        'Debug.Print objTree.Nodes.Item(objTree.Nodes.Count - ctr) & dataText
        objTree.Nodes.Item(objTree.Nodes.Count - ctr).Text = objTree.Nodes.Item(objTree.Nodes.Count - ctr) & dataText
    End If 'If InStr(1, objTree.Nodes.Item(objTree.Nodes.Count - ctr).Text, ": ") = 0 Then
Next
 

End Sub

'Verweise: Microsoft Windows Common Controls 6.0 (SP6)
Private Sub Befehl2_Click() 'Tree output
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
 'output the tree as a Lua table
Dim x As Integer
Dim ctr As Integer
Dim levelOutput As Integer
Dim oldlevelOutput As Integer
Dim textOutput As String

oldlevelOutput = -1
levelOutput = 0
'Debug.Print "Tree={branchname=""" & objTree.Nodes.Item(1) & """"
textOutput = "Tree={branchname=""" & objTree.Nodes.Item(1) & """"
'objTree.Nodes.Item(1).Expanded = True

Dim minCount As Integer
If objTree.Nodes.Count < Me.Text14 Then
    minCount = objTree.Nodes.Count
Else
    minCount = Me.Text14
End If

For ctr = 2 To minCount 'if number of nodes augmented then new nodes only at the end with objTree.Nodes.Count
    oldlevelOutput = levelOutput
    Set noddy = objTree.Nodes.Item(ctr)
    'objTree.Nodes.Item(ctr).Expanded = True
    'iterates through each node (and sub-node) in the tree
    'Debug.Print objTree.Nodes.Item(ctr).Parent & " " & noddy.Key
    'Debug.Print objTree.Nodes.Item(ctr).FullPath
    levelOutput = UBound(Split(objTree.Nodes.Item(ctr).FullPath, "\"))
    'Debug.Print "--" & oldlevelOutput & " -> " & levelOutput
    If oldlevelOutput < levelOutput Then
        'Debug.Print ",{branchname=""" & objTree.Nodes.Item(ctr) & """"
        textOutput = textOutput & "," & vbCrLf & "{branchname=""" & objTree.Nodes.Item(ctr) & """"
    ElseIf oldlevelOutput = levelOutput Then
        'Debug.Print "},{branchname=""" & objTree.Nodes.Item(ctr) & """"
        textOutput = textOutput & "}," & vbCrLf & "{branchname=""" & objTree.Nodes.Item(ctr) & """"
    ElseIf oldlevelOutput > levelOutput Then
        For i = 1 To oldlevelOutput - levelOutput
            'Debug.Print "},"
            textOutput = textOutput & "}," & vbCrLf
        Next
        'Debug.Print "},{branchname=""" & objTree.Nodes.Item(ctr) & """"
        textOutput = textOutput & "}," & vbCrLf & "{branchname=""" & objTree.Nodes.Item(ctr) & """"
    End If
    For x = Me.Text14 + 1 To objTree.Nodes.Count
        If objTree.Nodes.Item(ctr) = objTree.Nodes.Item(x).Parent Then
            Debug.Print objTree.Nodes.Item(x)
            textOutput = textOutput & "," & vbCrLf & "{branchname=""" & objTree.Nodes.Item(x) & """}"
        End If
    Next
Next
'Debug.Print "--" & levelOutput
For i = 1 To levelOutput
    'Debug.Print "},"
    textOutput = textOutput & "}," & vbCrLf
Next
'Debug.Print "}"
textOutput = textOutput & "}" & vbCrLf
Me.Text11 = textOutput
   'new nodes have the index at the end of Item list: Debug.Print objTree.Nodes.Item(objTree.Nodes.Count)
    Set objTree = Nothing

End Sub


Private Sub Befehl20_Click() 'Tree output with data


'put data in dictionary
Dim Db As DAO.Database
Dim rs1 As DAO.Recordset
Dim strSQL As String
Set Db = CurrentDb
Dim Dict As Scripting.Dictionary 'needs Microsoft Scripting Runtime
Set Dict = New Scripting.Dictionary
'Dict.Add Key:="x", Item:="122"
'Debug.Print Dict("x")
strSQL = "SELECT Matrixex_Prototyp_ExcelDB_Tree.IBAN, Matrixex_Prototyp_ExcelDB_Tree.Saldo FROM Matrixex_Prototyp_ExcelDB_Tree;"
Set rs1 = Db.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)
Dim IBANText As String
Dim SaldoZahl As Variant
Do While Not rs1.EOF
    'Debug.Print rs1!IBAN & " " & rs1!Saldo
    IBANText = rs1!IBAN
    SaldoZahl = rs1!Saldo
    Dict.Add Key:=IBANText, Item:=SaldoZahl
    rs1.MoveNext
Loop 'Do While Not rs.EOF
'For Each Key In Dict.Keys
'Debug.Print Key & " " & Dict(Key)
'Next Key
'Debug.Print Dict("DE1234567890123123")
'put data in dictionary end



    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
 'output the tree as a Lua table
Dim x As Integer
Dim ctr As Integer
Dim levelOutput As Integer
Dim oldlevelOutput As Integer
Dim textOutput As String

oldlevelOutput = -1
levelOutput = 0
'Debug.Print "Tree={branchname=""" & objTree.Nodes.Item(1) & """"
textOutput = "Tree={branchname=""" & objTree.Nodes.Item(1) & """"
'objTree.Nodes.Item(1).Expanded = True

Dim minCount As Integer
If objTree.Nodes.Count < Me.Text14 Then
    minCount = objTree.Nodes.Count
Else
    minCount = Me.Text14
End If

Dim dataText As String
Dim searchText As String
Dim dataSum As Double

dataSum = 0
For ctr = 2 To minCount 'if number of nodes augmented then new nodes only at the end with objTree.Nodes.Count
    oldlevelOutput = levelOutput
    Set noddy = objTree.Nodes.Item(ctr)
    searchText = objTree.Nodes.Item(ctr)
    dataText = Dict(searchText)
    If Not dataText = "" Then
        dataSum = dataSum + dataText
        dataText = ": " & dataText
    End If
    'Debug.Print objTree.Nodes.Item(ctr) & " " & Dict(searchText)
    'objTree.Nodes.Item(ctr).Expanded = True
    'iterates through each node (and sub-node) in the tree
    'Debug.Print objTree.Nodes.Item(ctr).Parent & " " & noddy.Key
    'Debug.Print objTree.Nodes.Item(ctr).FullPath
    levelOutput = UBound(Split(objTree.Nodes.Item(ctr).FullPath, "\"))
    'Debug.Print "--" & oldlevelOutput & " -> " & levelOutput
    If oldlevelOutput < levelOutput Then
        'Debug.Print ",{branchname=""" & objTree.Nodes.Item(ctr) & """"
        textOutput = textOutput & "," & vbCrLf & "{branchname=""" & objTree.Nodes.Item(ctr) & dataText & """"
    ElseIf oldlevelOutput = levelOutput Then
        'Debug.Print "},{branchname=""" & objTree.Nodes.Item(ctr) & """"
        textOutput = textOutput & "}," & vbCrLf & "{branchname=""" & objTree.Nodes.Item(ctr) & dataText & """"
    ElseIf oldlevelOutput > levelOutput Then
        For i = 1 To oldlevelOutput - levelOutput
            'Debug.Print "},"
            textOutput = textOutput & "}," & vbCrLf
        Next
        'Debug.Print "},{branchname=""" & objTree.Nodes.Item(ctr) & """"
        textOutput = textOutput & "}," & vbCrLf & "{branchname=""" & objTree.Nodes.Item(ctr) & dataText & """"
    End If
    For x = Me.Text14 + 1 To objTree.Nodes.Count
        If objTree.Nodes.Item(ctr) = objTree.Nodes.Item(x).Parent Then
            Debug.Print objTree.Nodes.Item(x)
            textOutput = textOutput & "," & vbCrLf & "{branchname=""" & objTree.Nodes.Item(x) & """}"
        End If
    Next
Next
'Debug.Print "--" & levelOutput
For i = 1 To levelOutput
    'Debug.Print "},"
    textOutput = textOutput & "}," & vbCrLf
Next
'Debug.Print "}"
textOutput = textOutput & "}" & vbCrLf
Me.Text11 = textOutput
   'new nodes have the index at the end of Item list: Debug.Print objTree.Nodes.Item(objTree.Nodes.Count)
    Debug.Print "dataSum: " & dataSum


'test with: textOutput = Replace(Me.Text11, "Tree={branchname=""" & objTree.Nodes.Item(1) & """", "Tree={branchname=""" & objTree.Nodes.Item(1) & ": " & dataSum & """")
'test with: Me.Text11 = textOutput


    Set objTree = Nothing

End Sub



Private Sub Befehl13_Click() 'Start Node
   Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
    Debug.Print objTree.SelectedItem.Text
    Dim RetVal
         
    If InStr(1, objTree.SelectedItem.Text, ":\", vbTextCompare) Then
        RetVal = Shell("CMD /r start ""d"" " & objTree.SelectedItem.Text, 1)
    Else
        RetVal = Shell("C:\WINDOWS\NOTEPAD.EXE", 1)    ' Open Notepad.
    End If
    'https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/shell-function
End Sub



Private Sub Befehl25_Click() 'Collapse leafs with data
    Dim objTree As TreeView
    Set objTree = Me.TreeView2.Object

For ctr = 2 To objTree.Nodes.Count
    If InStr(1, objTree.Nodes.Item(ctr), " # ") > 0 Then
        objTree.Nodes.Item(ctr).Expanded = False
    End If 'If InStr(1, objTree.Nodes.Item(ctr), " # ") > 0 Then
Next

End Sub

Private Sub Befehl26_Click() 'Delete limit informations
    Dim objTree As TreeView
    Set objTree = Me.TreeView2.Object
    Dim numberDeletedNodes As Integer
    Dim chosenIndex As Integer
    
    numberDeletedNodes = 0
For ctr = 0 To objTree.Nodes.Count - 1
    If ctr + numberDeletedNodes > objTree.Nodes.Count - 1 Then
        chosenIndex = objTree.Nodes.Count - 1
    Else
        chosenIndex = objTree.Nodes.Count - ctr
    End If
    
    If InStr(1, objTree.Nodes.Item(chosenIndex), "Limit") > 0 Then
        objTree.Nodes.Item(chosenIndex).Text = Left(objTree.Nodes.Item(chosenIndex), InStr(1, objTree.Nodes.Item(chosenIndex), ":") - 1)
    End If '   If InStr(1, objTree.Nodes.Item(objTree.Nodes.Count - ctr), "Limit") > 0 Then
    If objTree.Nodes.Item(chosenIndex) = "Limit" Then
        objTree.Nodes.Remove chosenIndex
        numberDeletedNodes = numberDeletedNodes + 1
    End If 'If objTree.Nodes.Item(objTree.Nodes.Count - ctr) = "Limit" Then
Next


End Sub


Private Sub Befehl28_Click() 'Update subtotals



Dim Db As DAO.Database
Dim rs As DAO.Recordset
Dim rs1 As DAO.Recordset
Dim strSQL As String
Dim strSQL_output As String
Dim arrayTree As Variant
Dim arrayTreeFilled() As Variant
Dim arrayTreeValue() As Variant
Dim arrayLevel() As Variant
Dim levelValue(0 To 120) As Variant
Dim oldlevelValue(0 To 120) As Variant
Dim x As Integer
Dim x1 As Integer
Dim dataText As String
   
  


DoCmd.SetWarnings False
Set Db = CurrentDb


strSQL = "SELECT Tree.Tree, Tree.Tree_result FROM Tree;"
Set rs = Db.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)

Do While Not rs.EOF
    rs.Edit
    levelNumber = 0
    isLeaf = "no"
    For x = 0 To UBound(levelValue)
        levelValue(x) = 0
        oldlevelValue(x) = 0
    Next 'For x = 0 To UBound(levelValue)

    
    'Debug.Print "rs!Tree: " & rs!Tree_result
    outputText = "" 'rs!Tree_result
    arrayTree = Split(Replace(Replace(Replace(rs!Tree_result, Chr(13) & Chr(10), ""), """,""", """,{leaf"""), "}", """}"""), """")
    'treat the array of the nodes in the tree of the cell
    x1 = 0
   
    
    For x = 0 To UBound(arrayTree)
        If arrayTree(x) = ",{branchname=" Then
            levelNumber = levelNumber + 1
        ElseIf arrayTree(x) = "}" And isLeaf = "yes" Then
            levelNumber = levelNumber - 2
            isLeaf = "no"
        ElseIf arrayTree(x) = "}" Then
            levelNumber = levelNumber - 1
            isLeaf = "no"
        ElseIf arrayTree(x) = ",{leaf" And isLeaf = "no" Then
            levelNumber = levelNumber + 1
            isLeaf = "yes"
        End If
        'Debug.Print levelNumber
        If Not arrayTree(x) = "}" And Not arrayTree(x) = "" And Not arrayTree(x) = "," And InStr(1, arrayTree(x), "{branchname=", vbTextCompare) = 0 Then
        'Debug.Print arrayTree(x)
            x1 = x1 + 1
            ReDim Preserve arrayLevel(x1)
            arrayLevel(x1) = levelNumber
            ReDim Preserve arrayTreeFilled(x1)
            arrayTreeFilled(x1) = arrayTree(x)
            ReDim Preserve arrayTreeValue(x1)
            arrayTreeValue(x1) = 0
        End If 'If Not arrayTree(x) = "}" And Not arrayTree(x) = "," And InStr(1, arrayTree(x), "Tree={branchname=", vbTextCompare) = 0 Then
    Next 'For x = 0 To UBound(arrayTree)
        
        Debug.Print arrayTreeFilled(UBound(arrayTreeFilled)) & ": " & arrayLevel(UBound(arrayTreeFilled))
        Debug.Print "U" & UBound(arrayTreeFilled) & ": " & arrayLevel(UBound(arrayTreeFilled))
        'ReDim Preserve levelValue(arrayLevel(UBound(arrayTreeFilled)))

    For x = 0 To UBound(arrayTreeFilled) - 1
        'Debug.Print x
        If InStr(1, arrayTreeFilled(UBound(arrayTreeFilled) - x), ": ", vbTextCompare) = 0 Then
            dataNumber = 0
        Else
            dataNumber = Mid(arrayTreeFilled(UBound(arrayTreeFilled) - x), InStr(1, arrayTreeFilled(UBound(arrayTreeFilled) - x), ": ", vbTextCompare) + 2)
        End If 'If InStr(1, arrayTreeFilled(UBound(arrayTreeFilled) - x), ": ", vbTextCompare) = 0 Then
        'Debug.Print arrayTreeFilled(UBound(arrayTreeFilled) - x) & ": " & dataNumber & ": " & arrayLevel(UBound(arrayTreeFilled) - x)
        
        If x > 0 Then
        'Debug.Print "I" & UBound(arrayTreeFilled) - x & ": " & arrayLevel(UBound(arrayTreeFilled) - x)
            'If arrayLevel(UBound(arrayTreeFilled) - x) < arrayLevel(UBound(arrayTreeFilled) - x + 1) Then 'is not sufficient if dataNumber overwritten by new value
            If arrayLevel(UBound(arrayTreeFilled) - x) < arrayLevel(UBound(arrayTreeFilled) - x + 1) And InStr(1, arrayTreeFilled(UBound(arrayTreeFilled) - x), ": ", vbTextCompare) = 0 Then
                oldlevelValue(arrayLevel(UBound(arrayTreeFilled) - x)) = levelValue(arrayLevel(UBound(arrayTreeFilled) - x)) + oldlevelValue(arrayLevel(UBound(arrayTreeFilled) - x))
                'Debug.Print "O" & oldlevelValue(arrayLevel(UBound(arrayTreeFilled) - x))
                levelValue(arrayLevel(UBound(arrayTreeFilled) - x)) = levelValue(arrayLevel(UBound(arrayTreeFilled) - x) + 1) + oldlevelValue(arrayLevel(UBound(arrayTreeFilled) - x) + 1)
                arrayTreeValue(UBound(arrayTreeFilled) - x) = levelValue(arrayLevel(UBound(arrayTreeFilled) - x))
                'Debug.Print levelValue(arrayLevel(UBound(arrayTreeFilled) - x))
            ElseIf arrayLevel(UBound(arrayTreeFilled) - x) < arrayLevel(UBound(arrayTreeFilled) - x + 1) And InStr(1, arrayTreeFilled(UBound(arrayTreeFilled) - x), ": ", vbTextCompare) > 0 Then
                oldlevelValue(arrayLevel(UBound(arrayTreeFilled) - x)) = Mid(arrayTreeFilled(UBound(arrayTreeFilled) - x), InStr(1, arrayTreeFilled(UBound(arrayTreeFilled) - x), ": ", vbTextCompare) + 2) + oldlevelValue(arrayLevel(UBound(arrayTreeFilled) - x))
                'Debug.Print "O" & oldlevelValue(arrayLevel(UBound(arrayTreeFilled) - x))
                levelValue(arrayLevel(UBound(arrayTreeFilled) - x)) = 0 + oldlevelValue(arrayLevel(UBound(arrayTreeFilled) - x) + 1)
                arrayTreeValue(UBound(arrayTreeFilled) - x) = levelValue(arrayLevel(UBound(arrayTreeFilled) - x))
                'Debug.Print levelValue(arrayLevel(UBound(arrayTreeFilled) - x))
            ElseIf arrayLevel(UBound(arrayTreeFilled) - x) > arrayLevel(UBound(arrayTreeFilled) - x + 1) Then
                levelValue(arrayLevel(UBound(arrayTreeFilled) - x)) = dataNumber 'Zurücksetzen, aber noch andere Knoten weiter unten im Baum mitzählen
                arrayTreeValue(UBound(arrayTreeFilled) - x) = levelValue(arrayLevel(UBound(arrayTreeFilled) - x))
                'Debug.Print levelValue(arrayLevel(UBound(arrayTreeFilled) - x))
            Else
                levelValue(arrayLevel(UBound(arrayTreeFilled) - x)) = levelValue(arrayLevel(UBound(arrayTreeFilled) - x)) * 1 + dataNumber
                arrayTreeValue(UBound(arrayTreeFilled) - x) = levelValue(arrayLevel(UBound(arrayTreeFilled) - x))
                'Debug.Print levelValue(arrayLevel(UBound(arrayTreeFilled) - x))
            End If
        Else
            levelValue(arrayLevel(UBound(arrayTreeFilled))) = dataNumber
            arrayTreeValue(UBound(arrayTreeFilled)) = levelValue(arrayLevel(UBound(arrayTreeFilled)))
    
        End If 'If arrayLevel(UBound(arrayTreeFilled) - x) < arrayLevel(UBound(arrayTreeFilled) - x + 1) Then
    
    Next 'For x = 0 To UBound(arrayTree)
    'test with: For x = 0 To UBound(levelValue)
    'test with:     Debug.Print x & ": " & levelValue(x)
    'test with: Next 'For x = 0 To UBound(levelValue)
    
    'start with first node
    If InStr(1, arrayTreeFilled(1), ": ", vbTextCompare) > 0 Then
        'Debug.Print "Tree={branchname=""" & arrayTreeFilled(1)
        outputText = "Tree={branchname=""" & arrayTreeFilled(1)
    Else
        'Debug.Print "Tree={branchname=""" & arrayTreeFilled(1) & ": " & arrayTreeValue(1) & """"
        outputText = "Tree={branchname=""" & arrayTreeFilled(1) & ": " & arrayTreeValue(1) & """"
    End If 'If InStr(1, arrayTreeFilled(1), ": ", vbTextCompare) > 0 Then
    

    For x = 2 To UBound(arrayTreeValue)
        oldarrayLevel = arrayLevel(x - 1)
        If InStr(1, arrayTreeFilled(x), ": ", vbTextCompare) > 0 Then
            'Debug.Print x & ": " & arrayTreeFilled(x)
            nodeText = arrayTreeFilled(x)
        Else
            'Debug.Print x & ": " & arrayTreeFilled(x) & ": " & arrayTreeValue(x)
            nodeText = arrayTreeFilled(x) & ": " & arrayTreeValue(x)
        End If 'If InStr(1, arrayTreeFilled(x), ": ", vbTextCompare) > 0 Then
        
        
        
        If oldarrayLevel < arrayLevel(x) Then
            'Debug.Print ",{branchname=""" & nodeText & """"
            outputText = outputText & "," & vbCrLf & "{branchname=""" & nodeText & """"
        ElseIf oldarrayLevel = arrayLevel(x) Then
            'Debug.Print "},{branchname=""" & nodeText & """"
            outputText = outputText & "}," & vbCrLf & "{branchname=""" & nodeText & """"
        ElseIf oldarrayLevel > arrayLevel(x) Then
            For i = 1 To oldarrayLevel - arrayLevel(x)
                'Debug.Print "},"
                outputText = outputText & "}," & vbCrLf
            Next
            'Debug.Print "},{branchname=""" & nodeText & """"
            outputText = outputText & "}," & vbCrLf & "{branchname=""" & nodeText & """"
        End If
    Next 'For x = 2 To UBound(arrayTreeValue)
    
    For i = 1 To arrayLevel(UBound(arrayTreeValue))
        'Debug.Print "},"
        outputText = outputText & "}," & vbCrLf
    Next
    'Debug.Print "}"
    outputText = outputText & "}" & vbCrLf

    'Debug.Print outputText
    rs!Tree_result = outputText
    rs.Update
    rs.MoveNext


Loop 'Do While Not rs.EOF



DoCmd.SetWarnings True



End Sub

Private Sub Befehl3_Click() 'Expand Tree
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
Dim ctr As Integer
For ctr = 1 To objTree.Nodes.Count
    objTree.Nodes.Item(ctr).Expanded = True
Next
End Sub


Private Sub Befehl16_Click() 'Mark Node
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
    Dim ctr As Integer
    Dim noddy As node

    For ctr = 1 To objTree.Nodes.Count
        If InStr(1, objTree.Nodes.Item(ctr), Me.Text7) Then
            objTree.Nodes.Item(ctr).ForeColor = RGB(0, 0, 255)
            Set noddy = objTree.Nodes.Item(ctr).Parent
            noddy.ForeColor = RGB(255, 0, 0)
            For i = 1 To objTree.Nodes.Count - ctr
                On Error Resume Next
                Set noddy = noddy.Parent
                On Error Resume Next
                noddy.ForeColor = RGB(255, 0, 0)
            Next
            
        End If
    Next

End Sub

Private Sub Befehl17_Click() 'Unmark Node
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
    Dim ctr As Integer

    For ctr = 1 To objTree.Nodes.Count
            objTree.Nodes.Item(ctr).ForeColor = RGB(0, 0, 0)
    Next

End Sub

Private Sub Befehl6_Click() 'Edit Node
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
Debug.Print objTree.SelectedItem.Text
Debug.Print Me.Text7
objTree.SelectedItem.Text = Me.Text7
End Sub

Private Sub Befehl9_Click() 'Add Node
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
Debug.Print objTree.SelectedItem.Text
Debug.Print Me.Text7
On Error Resume Next
objTree.Nodes.Add Relative:=objTree.SelectedItem.Text, Relationship:=tvwChild, Key:=Me.Text7, Text:=Me.Text7
End Sub

Private Sub Befehl10_Click() 'Delete Node
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
    Dim x As Integer
Debug.Print objTree.SelectedItem.Text
For ctr = 1 To objTree.Nodes.Count
    If objTree.Nodes.Item(ctr) = objTree.SelectedItem.Text Then
        x = ctr
    End If
Next

On Error Resume Next
objTree.Nodes.Remove x
End Sub


Private Sub Befehl27_Click() 'Delete Node result
    Dim objTree As TreeView
    Set objTree = Me.TreeView2.Object
    Dim x As Integer
Debug.Print objTree.SelectedItem.Text
For ctr = 1 To objTree.Nodes.Count
    If objTree.Nodes.Item(ctr) = objTree.SelectedItem.Text Then
        x = ctr
    End If
Next

On Error Resume Next
objTree.Nodes.Remove x

End Sub


Private Sub Befehl23_Click() 'Show Tree_result

    Dim objTree As TreeView
    Set objTree = Me.TreeView2.Object
   

Dim Db As DAO.Database
Dim rs As DAO.Recordset
Dim strSQL As String
Dim strSQL_output As String
Dim arrayTree As Variant
Dim x As Integer
Dim levelNumber As Integer
Dim isLeaf As String
Dim arrayNode() As Variant 'Dim arrayNode(-1 To 120) As Variant 'this limit of 120 is not necessary with ReDim

Debug.Print Forms!Tree.ID

DoCmd.SetWarnings False
Set Db = CurrentDb
strSQL = "SELECT Tree.Tree,Tree.Tree_result FROM Tree WHERE ID = " & Forms!Tree.ID & ";"
Set rs = Db.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)


If Not rs!Tree_result = "" Then
    levelNumber = 0
    keyNumber = 0
    isLeaf = "no"
    Do While Not rs.EOF
        'Debug.Print rs!Tree
        arrayTree = Split(Replace(Replace(Replace(rs!Tree_result, Chr(13) & Chr(10), ""), """,""", """,{leaf"""), "}", """}"""), """")
        For x = 0 To UBound(arrayTree)
            'Debug.Print arrayTree(x)
            If arrayTree(x) = ",{branchname=" Then
                levelNumber = levelNumber + 1
            ElseIf arrayTree(x) = "}" And isLeaf = "yes" Then
                levelNumber = levelNumber - 2
                isLeaf = "no"
            ElseIf arrayTree(x) = "}" Then
                levelNumber = levelNumber - 1
                isLeaf = "no"
            ElseIf arrayTree(x) = ",{leaf" And isLeaf = "no" Then
                levelNumber = levelNumber + 1
                isLeaf = "yes"
            End If 'If arrayTree(x) = ",{branchname=" Then
            'Debug.Print levelNumber
            If Not arrayTree(x) = "}" And Not arrayTree(x) = "," And InStr(1, arrayTree(x), "Tree={branchname=", vbTextCompare) = 0 Then
                arrayNode(levelNumber) = arrayTree(x)
                'Debug.Print levelNumber & "->" & arrayNode(levelNumber)
                If levelNumber = 0 Then
                    On Error Resume Next
                    objTree.Nodes.Add Key:=arrayNode(levelNumber), Text:=arrayNode(levelNumber) 'take dynamically the root node, before only "Tree"
                End If 'If levelNumber = 0 Then
            End If 'If Not arrayTree(x) = "}" And Not arrayTree(x) = "," And InStr(1, arrayTree(x), "Tree={branchname=", vbTextCompare) = 0 Then
            'Debug.Print arrayNode(levelNumber - 1) & ": " & arrayNode(levelNumber)
            On Error Resume Next
            ReDim Preserve arrayNode(levelNumber) 'resize array to have no limit, i.e. 120
            If Not arrayNode(levelNumber) = "" And Not Left(arrayNode(levelNumber), 1) = "," Then
                objTree.Nodes.Add Relative:=arrayNode(levelNumber - 1), Relationship:=tvwChild, Key:=arrayNode(levelNumber), Text:=arrayNode(levelNumber)
            End If 'If Not arrayNode(levelNumber) = "" And InStr(1, arrayNode(levelNumber), ",", vbTextCompare) = 0 Then
        Next 'For x = 0 To UBound(arrayTree)
        rs.MoveNext
    Loop 'Do While Not rs.EOF
    
    'print number of nodes
    Debug.Print objTree.Nodes.Count
    Me.Text14 = objTree.Nodes.Count
    'objTree.FullRowSelect = True
        Dim ctr As Integer
    For ctr = 1 To objTree.Nodes.Count
        objTree.Nodes.Item(ctr).Expanded = True
    Next
End If 'If Not Tree_result = "" Then
   
Set objTree = Nothing

End Sub


Private Sub Befehl11_Click() 'Update Tree_result

Dim Db As DAO.Database
Dim rs As DAO.Recordset
Dim rs1 As DAO.Recordset
Dim strSQL As String
Dim strSQL_output As String
Dim arrayTree As Variant
Dim arrayTree_result() As Variant
Dim x As Integer
Dim dataText As String

DoCmd.SetWarnings False
Set Db = CurrentDb

Dim Dict As Scripting.Dictionary 'needs Microsoft Scripting Runtime
Set Dict = New Scripting.Dictionary
'Dict.Add Key:="x", Item:="122"
'Debug.Print Dict("x")
strSQL = "SELECT Matrixex_Prototyp_ExcelDB_Tree.IBAN, Matrixex_Prototyp_ExcelDB_Tree.Saldo FROM Matrixex_Prototyp_ExcelDB_Tree;"
Set rs1 = Db.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)
Dim IBANText As String
Dim SaldoZahl As Variant
Do While Not rs1.EOF
    'Debug.Print rs1!IBAN & " " & rs1!Saldo
    IBANText = rs1!IBAN
    SaldoZahl = rs1!Saldo
    Dict.Add Key:=IBANText, Item:=SaldoZahl
    rs1.MoveNext
Loop 'Do While Not rs.EOF
'For Each Key In Dict.Keys
'Debug.Print Key & " " & Dict(Key)
'Next Key
'Debug.Print Dict("DE1234567890123123")
'put data in dictionary end

strSQL = "SELECT Tree.Tree, Tree.Tree_result FROM Tree;"
Set rs = Db.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)

			   
			 
Do While Not rs.EOF
    rs.Edit
    'Debug.Print "rs!Tree: " & rs!Tree
    outputText = ""
    arrayTree = Split(rs!Tree, """")
    'treat the array of the nodes in the tree of the cell
    For x = 0 To UBound(arrayTree)
        'Debug.Print arrayTree(x)
        ReDim Preserve arrayTree_result(x)
        nodeText = Replace(Replace(Replace(Replace(Replace(arrayTree(x), """", ""), "{branchname=", ""), "}", ""), ",", ""), "Tree=", "")
        dataText = Dict(nodeText)
        If Not dataText = "" Then
            'Debug.Print NodeText & ": " & dataText
            arrayTree_result(x) = Replace(arrayTree(x), nodeText, nodeText & ": " & dataText)
            outputText = outputText & arrayTree_result(x) & """"
        ElseIf InStr(1, arrayTree(x), "{branchname=", vbTextCompare) > 0 Then
            outputText = outputText & arrayTree(x) & """"
        Else
            outputText = outputText & arrayTree(x) & """"
        End If 'If Not NodeText = "" Then
        'Debug.Print arrayTree_result(x)
    Next 'For x = 0 To UBound(arrayTree)
    'Debug.Print outputText
    outputText = Replace(outputText, "}""", "}")
    rs!Tree_result = outputText
    rs.Update
    rs.MoveNext
Loop 'Do While Not rs.EOF

DoCmd.SetWarnings True



End Sub


Private Sub Form_Load() 'Load Tree
    Dim objTree As TreeView
    Set objTree = Me.TreeView0.Object
   
'objTree.Nodes.Add Key:="Bedarf", Text:="Bedarf"
'Add node that is a child
'objTree.Nodes.Add Relative:="Bedarf", Relationship:=tvwChild, Key:="Access VBA Formular", Text:="Access VBA Formular"
'objTree.Nodes.Add Relative:="Bedarf", Relationship:=tvwChild, Key:="Befüllung durch Tabelle möglich", Text:="Befüllung durch Tabelle möglich"

'objTree.Nodes.Add Key:="Tree", Text:="Tree"


Dim Db As DAO.Database
Dim rs As DAO.Recordset
Dim strSQL As String
Dim strSQL_output As String
Dim arrayTree As Variant
Dim x As Integer
Dim levelNumber As Integer
Dim isLeaf As String
Dim arrayNode() As Variant 'Dim arrayNode(-1 To 120) As Variant 'this limit of 120 is not necessary with ReDim

Debug.Print Forms!Tree.ID

DoCmd.SetWarnings False
Set Db = CurrentDb
strSQL = "SELECT Tree.Tree FROM Tree WHERE ID = " & Forms!Tree.ID & ";"
Set rs = Db.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)

levelNumber = 0
keyNumber = 0
isLeaf = "no"
Do While Not rs.EOF
    'Debug.Print rs!Tree
    arrayTree = Split(Replace(Replace(Replace(rs!Tree, Chr(13) & Chr(10), ""), """,""", """,{leaf"""), "}", """}"""), """")
    For x = 0 To UBound(arrayTree)
        If arrayTree(x) = ",{branchname=" Then
            levelNumber = levelNumber + 1
        ElseIf arrayTree(x) = "}" And isLeaf = "yes" Then
            levelNumber = levelNumber - 2
            isLeaf = "no"
        ElseIf arrayTree(x) = "}" Then
            levelNumber = levelNumber - 1
            isLeaf = "no"
        ElseIf arrayTree(x) = ",{leaf" And isLeaf = "no" Then
            levelNumber = levelNumber + 1
            isLeaf = "yes"
        End If
        'Debug.Print levelNumber
        If Not arrayTree(x) = "}" And Not arrayTree(x) = "," And InStr(1, arrayTree(x), "Tree={branchname=", vbTextCompare) = 0 Then
            arrayNode(levelNumber) = arrayTree(x)
        
            If levelNumber = 0 Then
                objTree.Nodes.Add Key:=arrayNode(levelNumber), Text:=arrayNode(levelNumber) 'take dynamically the root node, before only "Tree"
            End If
        
        
        End If
        'Debug.Print arrayNode(levelNumber - 1) & ": " & arrayNode(levelNumber)
    On Error Resume Next
    ReDim Preserve arrayNode(levelNumber) 'resize array to have no limit, i.e. 120
    If Not arrayNode(levelNumber) = "" And Not Left(arrayNode(levelNumber), 1) = "," Then
        objTree.Nodes.Add Relative:=arrayNode(levelNumber - 1), Relationship:=tvwChild, Key:=arrayNode(levelNumber), Text:=arrayNode(levelNumber)
    End If
    Next
    rs.MoveNext
Loop 'Do While Not rs.EOF


'Constants used to define relationship of node when adding
'CONSTANT / DESCRIPTION
'tvwFirst / Add as the first node at the level of the relative.
'tvwLast / Add as the last node at the level of the relative.
'tvwNext / Add after immediately following a specified node.
'tvwPrevious / Add after immediately preceding a specified node.
'tvwChild / Add as a child to the specified node.

'print number of nodes
Debug.Print objTree.Nodes.Count
Me.Text14 = objTree.Nodes.Count
'objTree.FullRowSelect = True

''''output the tree as a Lua table
'''Dim ctr As Integer
'''Dim levelOutput As Integer
'''Dim oldlevelOutput As Integer
'''
'''oldlevelOutput = -1
'''levelOutput = 0
'''Debug.Print "Tree={branchname=""" & objTree.Nodes.Item(1) & """"
'''objTree.Nodes.Item(1).Expanded = True
'''For ctr = 2 To objTree.Nodes.Count
'''    oldlevelOutput = levelOutput
'''    Set noddy = objTree.Nodes.Item(ctr)
'''    objTree.Nodes.Item(ctr).Expanded = True
'''    'iterates through each node (and sub-node) in the tree
'''    'Debug.Print objTree.Nodes.Item(ctr).Parent & " " & noddy.Key
'''    'Debug.Print objTree.Nodes.Item(ctr).FullPath
'''    levelOutput = UBound(Split(objTree.Nodes.Item(ctr).FullPath, "\"))
'''    'Debug.Print levelOutput
'''    If oldlevelOutput < levelOutput Then
'''        Debug.Print ",{branchname=""" & objTree.Nodes.Item(ctr) & """"
'''    ElseIf oldlevelOutput = levelOutput Then
'''        Debug.Print "},{branchname=""" & objTree.Nodes.Item(ctr) & """"
'''    ElseIf oldlevelOutput > levelOutput Then
'''        For i = 1 To oldlevelOutput - levelOutput
'''            Debug.Print "},"
'''        Next
'''        Debug.Print "},{branchname=""" & objTree.Nodes.Item(ctr) & """"
'''    End If
'''Next
'''For i = 1 To oldlevelOutput
'''    Debug.Print "},"
'''Next
'''Debug.Print "}"

    Dim ctr As Integer
For ctr = 1 To objTree.Nodes.Count
    objTree.Nodes.Item(ctr).Expanded = True
Next
   
Set objTree = Nothing
    
'test with: Me.TreeView2.Nodes.Add Key:="Tree_result", Text:="Tree_result"

End Sub




